'''bot.set_trainer(ListTrainer)

for _file in os.listdir('chats'):
    lines = open('chats/' + _file, 'r').readlines()
    bot.train(lines)'''


'''
speech = LiveSpeech(
    verbose=False,
    sampling_rate=16000,
    buffer_size=1024,
    no_search=False,
    full_utt=True,
    hmm='voice/model',
    lm='voice/model.lm.bin',
    dic='voice/model.dic'
)

speech = recognize_pt(audio) # usando o pocketsphinx

for phrase in speech:
    response = bot.get_response(phrase)
    print('VocÃª disse: %s' % phrase)
    print('Bot: %s' % response)
    speak(response)'''


def recognize_pt(audio):
    raw_data = audio.get_raw_data(convert_rate=16000, convert_width=2)

    decoder.start_utt()
    decoder.proccess_raw(raw_data, False, True)
    decoder.end_utt()

    hypothesis = decoder.hyp()
    if hypothesis is not None:
        return hypothesis.hypstr
    return None

from pocketsphinx import pocketsphinx, Jsgf, FsgModel

# create decorder object
config = pocketsphinx.Decoder.default_config()
config.set_string('-hmm', 'voice/model')
config.set_string('-lm', 'voice/model.lm.bin')
config.set_string('-dict', 'voice/model.dic')
config.set_string('-logfm', os.devnull)

decoder = pocketsphinx.Decoder(config)